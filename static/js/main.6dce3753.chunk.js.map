{"version":3,"sources":["features/anagramaGame/SavedGame.ts","features/anagramaGame/anagramaGameSlice.ts","features/anagramaGame/AnagramAPI.ts","components/solution.tsx","components/solutions.tsx","components/letter.tsx","components/word.tsx","components/game.tsx","components/game-loader.tsx","components/latest-game.tsx","components/latest-save.tsx","components/main.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["GetSavedGame","anagramaNormalizado","saved","localStorage","getItem","JSON","parse","GetLatestSavedGameAnagram","list","Object","keys","filter","value","startsWith","map","sort","a","b","updated","localeCompare","length","anagram","SaveGame","anagramaGame","word","game","Date","toJSON","setItem","stringify","created","solved","solutions","find","solution","SaveGameThunk","dispatch","getState","shuffleLetters","createAsyncThunk","_arg","thunkAPI","letters","_","shuffle","l","index","anagramaGameSlice","createSlice","name","initialState","currentWord","reducers","setAnagramaData","state","action","payload","clearLetters","used","selectLetter","letter","undefined","findIndex","toUpperCase","sIndex","s","normalizedSolution","extraReducers","builder","addCase","fulfilled","actions","selectAnagramaWord","selectAnagramaSolutions","getRachacucaAnagrama","normalizedAnagrama","axios","get","process","response","data","getRachacucaAnagramaIndex","getLastRachacucaGame","games","byDate","convertRachacucaToAnagramaGame","rcAnagrama","palavra","split","palavras","palavras_normalized","AnagramaSolutionComponent","props","className","ClassNames","repeat","AnagramaSolutionsComponent","useSelector","style","maxHeight","AnagramaLetterComponent","useDispatch","Button","width","height","lineHeight","textAlign","verticalAlign","padding","fontSize","disabled","onClick","AnagramaWordComponent","AnagramaGameComponent","handleKeyDown","useCallback","evt","key","normalize","replace","useEffect","window","addEventListener","removeEventListener","GameLoaderComponent","anagrama","useParams","useState","loaded","setLoaded","error","setError","join","gameData","LatestGameComponent","setAnagrama","to","LatestSaveComponent","MainComponent","as","NavLink","App","Container","path","exact","store","configureStore","reducer","anagramaGameReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6dce3753.chunk.js","sourcesContent":["import { AnagramaGame, SavedGame } from '../../interfaces'\n\nexport function GetSavedGame(anagramaNormalizado: string): SavedGame | null {\n  const saved = localStorage.getItem('saved:' + anagramaNormalizado)\n  if (saved) {\n    return JSON.parse(saved) as SavedGame\n  }\n  return null\n}\n\nexport function GetLatestSavedGameAnagram(): string | null {\n  const list = GetOrderedSave()\n  if (list.length === 0) return null\n  return list[list.length - 1].anagram\n}\n\nexport function GetOrderedSave(): SavedGame[] {\n  return Object.keys(localStorage)\n    .filter((value) => value.startsWith('saved'))\n    .map(\n      (value) => JSON.parse(localStorage.getItem(value) as string) as SavedGame\n    )\n    .sort((a, b) => a.updated.localeCompare(b.updated))\n}\n\nexport function SaveGame(anagramaGame: AnagramaGame): void {\n  const saved = GetSavedGame(anagramaGame.word.anagram)\n  if (saved) {\n    saved.game = anagramaGame\n    saved.updated = new Date().toJSON()\n    localStorage.setItem(\n      'saved:' + anagramaGame.word.anagram,\n      JSON.stringify(saved)\n    )\n  } else {\n    localStorage.setItem(\n      'saved:' + anagramaGame.word.anagram,\n      JSON.stringify({\n        anagram: anagramaGame.word.anagram,\n        created: new Date().toJSON(),\n        updated: new Date().toJSON(),\n        game: anagramaGame,\n        solved:\n          anagramaGame.solutions.find((solution) => !solution.solved) === null,\n      } as SavedGame)\n    )\n  }\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { AnagramaGame, AnagramaLetter } from '../../interfaces'\nimport _ from 'lodash'\nimport { SaveGame } from './SavedGame'\n\nexport const SaveGameThunk = (): AppThunk => async (dispatch, getState) => {\n  SaveGame(getState().anagramaGame)\n}\n\nexport const shuffleLetters = createAsyncThunk<\n  AnagramaLetter[],\n  void,\n  {\n    // Optional fields for defining thunkApi field types\n    state: RootState\n  }\n>('anagramas/shuffleLetters', async (_arg, thunkAPI) => {\n  const letters = thunkAPI.getState().anagramaGame.word.letters\n  return _.shuffle(letters).map((l, index) => ({ ...l, index }))\n})\n\nexport interface AnagramaGameState extends AnagramaGame {}\n\nconst initialState: AnagramaGameState = {\n  solutions: [],\n  word: {\n    anagram: '',\n    currentWord: '',\n    letters: [],\n  },\n}\n\nexport const anagramaGameSlice = createSlice({\n  name: 'anagramaGame',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setAnagramaData: (state, action: PayloadAction<AnagramaGame>) => {\n      return action.payload\n    },\n    clearLetters: (state) => {\n      state.word.currentWord = ''\n      state.word.letters = state.word.letters.map((l) => ({\n        ...l,\n        used: false,\n      }))\n    },\n    selectLetter: (\n      state,\n      action: PayloadAction<{ letter: string; index?: number }>\n    ) => {\n      let { letter, index } = action.payload\n      if (index === undefined) {\n        index = state.word.letters.findIndex(\n          (l) => !l.used && l.letter.toUpperCase() === letter.toUpperCase()\n        )\n      }\n      if (index >= 0) {\n        state.word.letters[index].used = true\n        state.word.currentWord += letter.toUpperCase()\n\n        //Checa se há soluções\n        const sIndex = state.solutions.findIndex(\n          (s) =>\n            !s.solved &&\n            s.normalizedSolution.toUpperCase() ===\n              state.word.currentWord.toUpperCase()\n        )\n        if (sIndex >= 0) {\n          state.solutions[sIndex].solved = true\n          state.word.currentWord = ''\n          state.word.letters = state.word.letters.map((l) => ({\n            ...l,\n            used: false,\n          }))\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(shuffleLetters.fulfilled, (state, { payload }) => {\n      state.word.letters = payload\n    })\n  },\n})\n\nexport const {\n  setAnagramaData,\n  clearLetters,\n  selectLetter,\n} = anagramaGameSlice.actions\n\nexport const selectAnagramaGame = (state: RootState) => state.anagramaGame\nexport const selectAnagramaWord = (state: RootState) => state.anagramaGame.word\nexport const selectAnagramaSolutions = (state: RootState) =>\n  state.anagramaGame.solutions\n\nexport default anagramaGameSlice.reducer\n","import axios from 'axios'\nimport _ from 'lodash'\nimport {\n  AnagramaGame,\n  RachaCucaAnagramas,\n  RachaCucaAnagramasIndex,\n} from '../../interfaces'\n\nexport async function getRachacucaAnagrama(normalizedAnagrama: string) {\n  const response = await axios.get<RachaCucaAnagramas>(\n    `${process.env.PUBLIC_URL}/dump/${normalizedAnagrama}.json`\n  )\n  return response.data\n}\n\nexport async function getRachacucaAnagramaIndex() {\n  const response = await axios.get<RachaCucaAnagramasIndex>(\n    `${process.env.PUBLIC_URL}/dump/index.json`\n  )\n  return response.data\n}\n\nexport async function getLastRachacucaGame() {\n  const games = await getRachacucaAnagramaIndex()\n  return games.byDate[games.byDate.length - 1].anagram\n}\n\nexport function convertRachacucaToAnagramaGame(\n  rcAnagrama: RachaCucaAnagramas\n): AnagramaGame {\n  const gameData: AnagramaGame = {\n    word: {\n      anagram: rcAnagrama.palavra,\n      currentWord: '',\n      letters: _.shuffle(rcAnagrama.palavra.split('')).map((letter, index) => ({\n        letter: letter,\n        used: false,\n        index,\n      })),\n    },\n    solutions: rcAnagrama.palavras.map((palavra, index) => ({\n      solution: palavra,\n      normalizedSolution: rcAnagrama.palavras_normalized[index],\n      solved: false,\n    })),\n  }\n  return gameData\n}\n","import React from 'react'\r\nimport ClassNames from 'classnames'\r\nimport { AnagramaSolution } from '../interfaces'\r\n\r\nexport function AnagramaSolutionComponent(props: AnagramaSolution) {\r\n  const { solution, solved } = props\r\n\r\n  return (\r\n    <div className={ClassNames(['col-3', { 'font-weight-bold': solved }])}>\r\n      {solved ? solution.toUpperCase() : '?'.repeat(solution.length)}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAnagramaSolutions } from '../features/anagramaGame/anagramaGameSlice'\nimport { AnagramaSolutionComponent } from './solution'\nexport function AnagramaSolutionsComponent() {\n  const solutions = useSelector(selectAnagramaSolutions)\n  return (\n    <div\n      className=\"row d-flex align-items-start flex-column\"\n      style={{ maxHeight: '50vh' }}\n    >\n      {solutions.map((solution) => {\n        return (\n          <AnagramaSolutionComponent key={solution.solution} {...solution} />\n        )\n      })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useDispatch } from 'react-redux'\nimport {\n  SaveGameThunk,\n  selectLetter,\n} from '../features/anagramaGame/anagramaGameSlice'\nimport { AnagramaLetter } from '../interfaces'\n\nexport function AnagramaLetterComponent(props: AnagramaLetter) {\n  const dispatch = useDispatch()\n\n  const { letter, index, used } = props\n  const handleClick = () => {\n    dispatch(selectLetter({ letter, index }))\n    dispatch(SaveGameThunk())\n  }\n\n  return (\n    <Button\n      className=\"mr-2 mt-2 pd-0 btn-lg\"\n      style={{\n        width: '2em',\n        height: '2em',\n        lineHeight: '2em',\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        padding: '0',\n        fontSize: '2em',\n      }}\n      disabled={used}\n      onClick={handleClick}\n    >\n      {letter.toUpperCase()}\n    </Button>\n  )\n}\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  clearLetters,\n  SaveGameThunk,\n  selectAnagramaWord,\n  shuffleLetters,\n} from '../features/anagramaGame/anagramaGameSlice'\n\nimport { AnagramaLetterComponent } from './letter'\n\nexport function AnagramaWordComponent() {\n  const dispatch = useDispatch()\n  const word = useSelector(selectAnagramaWord)\n  const { currentWord, letters } = word\n  const handleShuffle = () => {\n    dispatch(shuffleLetters())\n    dispatch(SaveGameThunk())\n  }\n  const handleClear = () => {\n    dispatch(clearLetters())\n    dispatch(SaveGameThunk())\n  }\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-12 text-center\">\n          {letters.map((letter) => {\n            return (\n              <AnagramaLetterComponent\n                key={letter.letter + letter.index}\n                {...letter}\n              />\n            )\n          })}\n          <Button className=\"btn-warning\" onClick={handleShuffle}>\n            Misturar\n          </Button>\n        </div>\n      </div>\n      <div className=\"row justify-content-md-center mt-2\">\n        <div className=\"col-12 col-md-6 text-center h2\">\n          {currentWord}{' '}\n          <Button\n            className=\"btn-danger float-right\"\n            onClick={handleClear}\n            disabled={word.currentWord === ''}\n          >\n            Limpar\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport {\n  clearLetters,\n  SaveGameThunk,\n  selectLetter,\n} from '../features/anagramaGame/anagramaGameSlice'\nimport { AnagramaSolutionsComponent } from './solutions'\nimport { AnagramaWordComponent } from './word'\n\nexport function AnagramaGameComponent() {\n  const dispatch = useDispatch()\n  const handleKeyDown = useCallback(\n    (evt: KeyboardEvent) => {\n      if (evt.key.length === 1) {\n        const letter = evt.key\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .toUpperCase()\n        dispatch(selectLetter({ letter }))\n        dispatch(SaveGameThunk())\n      } else if (evt.key === 'Backspace') {\n        dispatch(clearLetters())\n        dispatch(SaveGameThunk())\n      }\n    },\n    [dispatch]\n  )\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown])\n  return (\n    <div className=\"mt-5\">\n      <AnagramaWordComponent />\n      <AnagramaSolutionsComponent />\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { setAnagramaData } from '../features/anagramaGame/anagramaGameSlice'\nimport {\n  convertRachacucaToAnagramaGame,\n  getRachacucaAnagrama,\n} from '../features/anagramaGame/AnagramAPI'\nimport { GetSavedGame } from '../features/anagramaGame/SavedGame'\nimport { AnagramaGameComponent } from './game'\n\ninterface GameLoaderParams {\n  anagrama: string\n}\n\nexport function GameLoaderComponent() {\n  const dispatch = useDispatch()\n  const { anagrama } = useParams() as GameLoaderParams\n  const [loaded, setLoaded] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  useEffect(() => {\n    ;(async () => {\n      const normalizedAnagrama = anagrama.split('').sort().join('')\n      const saved = GetSavedGame(normalizedAnagrama)\n      if (saved) {\n        dispatch(setAnagramaData(saved.game))\n        setLoaded(true)\n      } else {\n        try {\n          const gameData = convertRachacucaToAnagramaGame(\n            await getRachacucaAnagrama(normalizedAnagrama)\n          )\n          dispatch(setAnagramaData(gameData))\n          setLoaded(true)\n        } catch (e) {\n          setError('Os dados deste jogo não puderam ser carregados.')\n        }\n      }\n    })()\n  }, [anagrama, dispatch])\n\n  if (error !== null) {\n    return <div>{error}</div>\n  }\n  if (loaded) {\n    return (\n      <div>\n        <AnagramaGameComponent />\n      </div>\n    )\n  }\n  return <div>Carregando: {anagrama}</div>\n}\n","import React, { useState } from 'react'\nimport { useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { getLastRachacucaGame } from '../features/anagramaGame/AnagramAPI'\n\nexport function LatestGameComponent() {\n  const [anagrama, setAnagrama] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  useEffect(() => {\n    ;(async () => {\n      try {\n        setAnagrama(await getLastRachacucaGame())\n      } catch (e) {\n        setError('Ocorreu um erro!')\n      }\n    })()\n  }, [])\n\n  if (error != null) {\n    return <Redirect to={`/`} />\n  }\n\n  if (anagrama != null) {\n    return <Redirect to={`/game/${anagrama}`} />\n  }\n\n  return <div>carregando...</div>\n}\n","import React, { useState } from 'react'\nimport { useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { GetLatestSavedGameAnagram } from '../features/anagramaGame/SavedGame'\n\nexport function LatestSaveComponent() {\n  const [anagrama, setAnagrama] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  useEffect(() => {\n    const latestSaveAnagram = GetLatestSavedGameAnagram()\n    if (latestSaveAnagram === null) {\n      setError('Não há jogos salvos!')\n    } else {\n      setAnagrama(GetLatestSavedGameAnagram())\n    }\n  }, [])\n\n  if (error != null) {\n    return <Redirect to={`/`} />\n  }\n\n  if (anagrama != null) {\n    return <Redirect to={`/game/${anagrama}`} />\n  }\n\n  return <div>carregando...</div>\n}\n","import { Button } from 'react-bootstrap'\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport function MainComponent() {\n  return (\n    <div className=\"mt-5\">\n      <Button className=\"btn-lg btn-block\" as={NavLink} to=\"/game/latest\">\n        Ir para a palavra mais recente\n      </Button>\n      <Button className=\"btn-lg btn-block\" as={NavLink} to=\"/game/continue\">\n        Continuar o último jogo salvo\n      </Button>\n      <Button className=\"btn-lg btn-block\">Listar todos os jogos</Button>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css'\nimport { GameLoaderComponent } from './components/game-loader'\nimport { LatestGameComponent } from './components/latest-game'\nimport { LatestSaveComponent } from './components/latest-save'\nimport { MainComponent } from './components/main'\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <Switch>\n          <Route path=\"/\" exact>\n            <MainComponent />\n          </Route>\n          <Route path=\"/game/continue\" exact>\n            <LatestSaveComponent />\n          </Route>\n          <Route path=\"/game/latest\" exact>\n            <LatestGameComponent />\n          </Route>\n          <Route path=\"/game/:anagrama\">\n            <GameLoaderComponent />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport anagramaGameReducer from '../features/anagramaGame/anagramaGameSlice'\n\nexport const store = configureStore({\n  reducer: {\n    anagramaGame: anagramaGameReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}