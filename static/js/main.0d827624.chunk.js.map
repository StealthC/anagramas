{"version":3,"sources":["features/anagramaGame/SavedGame.ts","features/anagramaGame/anagramaGameSlice.ts","components/solution.tsx","components/solutions.tsx","components/letter.tsx","components/word.tsx","components/game.tsx","components/game-loader.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["GetSavedGame","anagramaNormalizado","saved","localStorage","getItem","JSON","parse","SaveGame","anagramaGame","word","anagram","game","updated","Date","toJSON","setItem","stringify","created","solved","solutions","find","solution","SaveGameThunk","dispatch","getState","a","shuffleLetters","createAsyncThunk","_arg","thunkAPI","letters","_","shuffle","map","l","index","anagramaGameSlice","createSlice","name","initialState","currentWord","reducers","setAnagramaData","state","action","payload","clearLetters","used","selectLetter","letter","undefined","findIndex","toUpperCase","sIndex","s","normalizedSolution","extraReducers","builder","addCase","fulfilled","actions","selectAnagramaWord","selectAnagramaSolutions","AnagramaSolutionComponent","props","className","ClassNames","repeat","length","AnagramaSolutionsComponent","useSelector","style","maxHeight","AnagramaLetterComponent","useDispatch","Button","width","height","lineHeight","textAlign","verticalAlign","padding","fontSize","disabled","onClick","AnagramaWordComponent","AnagramaGameComponent","handleKeyDown","useCallback","evt","key","normalize","replace","useEffect","window","addEventListener","removeEventListener","GameLoaderComponent","anagrama","useParams","useState","loaded","setLoaded","error","setError","normalizedAnagrama","split","sort","join","axios","get","process","response","gameData","data","palavras","palavra","palavras_normalized","App","Container","path","store","configureStore","reducer","anagramaGameReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0d827624.chunk.js","sourcesContent":["import { AnagramaGame, SavedGame } from '../../interfaces'\r\n\r\nexport function GetSavedGame(anagramaNormalizado: string): SavedGame | null {\r\n  const saved = localStorage.getItem('saved:' + anagramaNormalizado)\r\n  if (saved) {\r\n    return JSON.parse(saved) as SavedGame\r\n  }\r\n  return null\r\n}\r\n\r\nexport function SaveGame(anagramaGame: AnagramaGame): void {\r\n  const saved = GetSavedGame(anagramaGame.word.anagram)\r\n  if (saved) {\r\n    saved.game = anagramaGame\r\n    saved.updated = new Date().toJSON()\r\n    localStorage.setItem(\r\n      'saved:' + anagramaGame.word.anagram,\r\n      JSON.stringify(saved)\r\n    )\r\n  } else {\r\n    localStorage.setItem(\r\n      'saved:' + anagramaGame.word.anagram,\r\n      JSON.stringify({\r\n        anagram: anagramaGame.word.anagram,\r\n        created: new Date().toJSON(),\r\n        updated: new Date().toJSON(),\r\n        game: anagramaGame,\r\n        solved:\r\n          anagramaGame.solutions.find((solution) => !solution.solved) === null,\r\n      } as SavedGame)\r\n    )\r\n  }\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { AnagramaGame, AnagramaLetter } from '../../interfaces'\nimport _ from 'lodash'\nimport { SaveGame } from './SavedGame'\n\nexport const SaveGameThunk = (): AppThunk => async (dispatch, getState) => {\n  SaveGame(getState().anagramaGame)\n}\n\nexport const shuffleLetters = createAsyncThunk<\n  AnagramaLetter[],\n  void,\n  {\n    // Optional fields for defining thunkApi field types\n    state: RootState\n  }\n>('anagramas/shuffleLetters', async (_arg, thunkAPI) => {\n  const letters = thunkAPI.getState().anagramaGame.word.letters\n  return _.shuffle(letters).map((l, index) => ({ ...l, index }))\n})\n\nexport interface AnagramaGameState extends AnagramaGame {}\n\nconst initialState: AnagramaGameState = {\n  solutions: [],\n  word: {\n    anagram: '',\n    currentWord: '',\n    letters: [],\n  },\n}\n\nexport const anagramaGameSlice = createSlice({\n  name: 'anagramaGame',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setAnagramaData: (state, action: PayloadAction<AnagramaGame>) => {\n      return action.payload\n    },\n    clearLetters: (state) => {\n      state.word.currentWord = ''\n      state.word.letters = state.word.letters.map((l) => ({\n        ...l,\n        used: false,\n      }))\n    },\n    selectLetter: (\n      state,\n      action: PayloadAction<{ letter: string; index?: number }>\n    ) => {\n      let { letter, index } = action.payload\n      if (index === undefined) {\n        index = state.word.letters.findIndex(\n          (l) => !l.used && l.letter.toUpperCase() === letter.toUpperCase()\n        )\n      }\n      if (index >= 0) {\n        state.word.letters[index].used = true\n        state.word.currentWord += letter.toUpperCase()\n\n        //Checa se há soluções\n        const sIndex = state.solutions.findIndex(\n          (s) =>\n            !s.solved &&\n            s.normalizedSolution.toUpperCase() ===\n              state.word.currentWord.toUpperCase()\n        )\n        if (sIndex >= 0) {\n          state.solutions[sIndex].solved = true\n          state.word.currentWord = ''\n          state.word.letters = state.word.letters.map((l) => ({\n            ...l,\n            used: false,\n          }))\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(shuffleLetters.fulfilled, (state, { payload }) => {\n      state.word.letters = payload\n    })\n  },\n})\n\nexport const {\n  setAnagramaData,\n  clearLetters,\n  selectLetter,\n} = anagramaGameSlice.actions\n\nexport const selectAnagramaGame = (state: RootState) => state.anagramaGame\nexport const selectAnagramaWord = (state: RootState) => state.anagramaGame.word\nexport const selectAnagramaSolutions = (state: RootState) =>\n  state.anagramaGame.solutions\n\nexport default anagramaGameSlice.reducer\n","import React from 'react'\r\nimport ClassNames from 'classnames'\r\nimport { AnagramaSolution } from '../interfaces'\r\n\r\nexport function AnagramaSolutionComponent(props: AnagramaSolution) {\r\n  const { solution, solved } = props\r\n\r\n  return (\r\n    <div className={ClassNames(['col-3', { 'font-weight-bold': solved }])}>\r\n      {solved ? solution.toUpperCase() : '?'.repeat(solution.length)}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectAnagramaSolutions } from '../features/anagramaGame/anagramaGameSlice'\r\nimport { AnagramaSolutionComponent } from './solution'\r\nexport function AnagramaSolutionsComponent() {\r\n  const solutions = useSelector(selectAnagramaSolutions)\r\n  return (\r\n    <div className=\"row\" style={{ maxHeight: '50vh' }}>\r\n      {solutions.map((solution) => {\r\n        return (\r\n          <AnagramaSolutionComponent key={solution.solution} {...solution} />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  SaveGameThunk,\r\n  selectLetter,\r\n} from '../features/anagramaGame/anagramaGameSlice'\r\nimport { AnagramaLetter } from '../interfaces'\r\n\r\nexport function AnagramaLetterComponent(props: AnagramaLetter) {\r\n  const dispatch = useDispatch()\r\n\r\n  const { letter, index, used } = props\r\n  const handleClick = () => {\r\n    dispatch(selectLetter({ letter, index }))\r\n    dispatch(SaveGameThunk())\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      className=\"mr-2 pd-0 btn-lg\"\r\n      style={{\r\n        width: '2em',\r\n        height: '2em',\r\n        lineHeight: '2em',\r\n        textAlign: 'center',\r\n        verticalAlign: 'middle',\r\n        padding: '0',\r\n        fontSize: '2em',\r\n      }}\r\n      disabled={used}\r\n      onClick={handleClick}\r\n    >\r\n      {letter.toUpperCase()}\r\n    </Button>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  clearLetters,\r\n  SaveGameThunk,\r\n  selectAnagramaWord,\r\n  shuffleLetters,\r\n} from '../features/anagramaGame/anagramaGameSlice'\r\n\r\nimport { AnagramaLetterComponent } from './letter'\r\n\r\nexport function AnagramaWordComponent() {\r\n  const dispatch = useDispatch()\r\n  const word = useSelector(selectAnagramaWord)\r\n  const { currentWord, letters } = word\r\n  const handleShuffle = () => {\r\n    dispatch(shuffleLetters())\r\n    dispatch(SaveGameThunk())\r\n  }\r\n  const handleClear = () => {\r\n    dispatch(clearLetters())\r\n    dispatch(SaveGameThunk())\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12 text-center\">\r\n          {letters.map((letter) => {\r\n            return (\r\n              <AnagramaLetterComponent\r\n                key={letter.letter + letter.index}\r\n                {...letter}\r\n              />\r\n            )\r\n          })}\r\n          <Button className=\"btn-warning\" onClick={handleShuffle}>\r\n            Misturar\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-12 text-center h2\">\r\n          {currentWord}{' '}\r\n          <Button\r\n            className=\"btn-danger\"\r\n            onClick={handleClear}\r\n            disabled={word.currentWord === ''}\r\n          >\r\n            Limpar\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport {\n  clearLetters,\n  selectLetter,\n} from '../features/anagramaGame/anagramaGameSlice'\nimport { AnagramaSolutionsComponent } from './solutions'\nimport { AnagramaWordComponent } from './word'\n\nexport function AnagramaGameComponent() {\n  const dispatch = useDispatch()\n  const handleKeyDown = useCallback(\n    (evt: KeyboardEvent) => {\n      if (evt.key.length === 1) {\n        const letter = evt.key\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .toUpperCase()\n        dispatch(selectLetter({ letter }))\n      } else if (evt.key === 'Backspace') {\n        dispatch(clearLetters())\n      }\n    },\n    [dispatch]\n  )\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown])\n  return (\n    <div className=\"mt-5\">\n      <AnagramaWordComponent />\n      <AnagramaSolutionsComponent />\n    </div>\n  )\n}\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useParams } from 'react-router-dom'\r\nimport { setAnagramaData } from '../features/anagramaGame/anagramaGameSlice'\r\nimport { GetSavedGame } from '../features/anagramaGame/SavedGame'\r\nimport { AnagramaGame, RachaCucaAnagramas } from '../interfaces'\r\nimport { AnagramaGameComponent } from './game'\r\n\r\ninterface GameLoaderParams {\r\n  anagrama: string\r\n}\r\n\r\nexport function GameLoaderComponent() {\r\n  const dispatch = useDispatch()\r\n  const { anagrama } = useParams() as GameLoaderParams\r\n  const [loaded, setLoaded] = useState<boolean>(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  useEffect(() => {\r\n    ;(async () => {\r\n      const normalizedAnagrama = anagrama.split('').sort().join('')\r\n      const saved = GetSavedGame(normalizedAnagrama)\r\n      if (saved) {\r\n        dispatch(setAnagramaData(saved.game))\r\n        setLoaded(true)\r\n      } else {\r\n        try {\r\n          const response = await axios.get<RachaCucaAnagramas>(\r\n            `${process.env.PUBLIC_URL}/dump/${normalizedAnagrama}.json`\r\n          )\r\n          const gameData: AnagramaGame = {\r\n            word: {\r\n              anagram: normalizedAnagrama,\r\n              currentWord: '',\r\n              letters: normalizedAnagrama.split('').map((letter, index) => ({\r\n                letter: letter,\r\n                used: false,\r\n                index,\r\n              })),\r\n            },\r\n            solutions: response.data.palavras.map((palavra, index) => ({\r\n              solution: palavra,\r\n              normalizedSolution: response.data.palavras_normalized[index],\r\n              solved: false,\r\n            })),\r\n          }\r\n          dispatch(setAnagramaData(gameData))\r\n          setLoaded(true)\r\n        } catch (e) {\r\n          setError('Os dados deste jogo não puderam ser carregados.')\r\n        }\r\n      }\r\n    })()\r\n  }, [anagrama, dispatch])\r\n\r\n  if (error !== null) {\r\n    return <div>{error}</div>\r\n  }\r\n  if (loaded) {\r\n    return (\r\n      <div>\r\n        <AnagramaGameComponent />\r\n      </div>\r\n    )\r\n  }\r\n  return <div>Carregando: {anagrama}</div>\r\n}\r\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css'\nimport { GameLoaderComponent } from './components/game-loader'\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <Switch>\n          <Route path=\"/game/:anagrama\">\n            <GameLoaderComponent />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport anagramaGameReducer from '../features/anagramaGame/anagramaGameSlice'\n\nexport const store = configureStore({\n  reducer: {\n    anagramaGame: anagramaGameReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}