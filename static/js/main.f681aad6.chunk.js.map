{"version":3,"sources":["features/anagramaGame/AnagramAPI.ts","features/anagramaGame/SavedGame.ts","components/game-list.tsx","features/anagramaGame/anagramaGameSlice.ts","components/solution.tsx","components/solutions.tsx","components/letter.tsx","components/word.tsx","components/game.tsx","components/game-loader.tsx","components/latest-game.tsx","components/latest-save.tsx","components/main.tsx","components/top-menu.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["getRachacucaAnagrama","normalizedAnagrama","a","axios","get","process","response","data","getRachacucaAnagramaIndex","getLastRachacucaGame","games","byDate","length","anagram","convertRachacucaToAnagramaGame","rcAnagrama","word","palavra","currentWord","letters","_","shuffle","split","map","letter","index","used","solutions","palavras","solution","normalizedSolution","palavras_normalized","solved","GetSavedGame","anagramaNormalizado","saved","localStorage","getItem","JSON","parse","GetLatestSavedGameAnagram","list","Object","keys","filter","value","startsWith","sort","b","updated","localeCompare","SaveGame","anagramaGame","game","Date","toJSON","setItem","stringify","created","find","GameListComponent","useState","anagramas","setAnagramas","error","setError","useEffect","slice","reverse","Button","className","ClassNames","as","NavLink","to","toUpperCase","date","SaveGameThunk","dispatch","getState","shuffleLetters","createAsyncThunk","_arg","thunkAPI","l","anagramaGameSlice","createSlice","name","initialState","reducers","setAnagramaData","state","action","payload","clearLetters","selectLetter","undefined","findIndex","sIndex","s","extraReducers","builder","addCase","fulfilled","actions","selectAnagramaWord","selectAnagramaSolutions","AnagramaSolutionComponent","props","repeat","AnagramaSolutionsComponent","useSelector","style","minHeight","maxHeight","AnagramaLetterComponent","useDispatch","width","height","lineHeight","textAlign","verticalAlign","padding","fontSize","disabled","onClick","AnagramaWordComponent","AnagramaGameComponent","handleKeyDown","useCallback","evt","key","normalize","replace","window","addEventListener","removeEventListener","GameLoaderComponent","anagrama","useParams","loaded","setLoaded","join","gameData","LatestGameComponent","setAnagrama","LatestSaveComponent","MainComponent","TopMenuComponent","Navbar","bg","variant","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","App","Container","fluid","path","exact","store","configureStore","reducer","anagramaGameReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"yTAQO,SAAeA,EAAtB,kC,4CAAO,WAAoCC,GAApC,eAAAC,EAAA,sEACkBC,IAAMC,IAAN,UAClBC,uCADkB,iBACaJ,EADb,UADlB,cACCK,EADD,yBAIEA,EAASC,MAJX,4C,sBAOA,SAAeC,IAAtB,+B,4CAAO,4BAAAN,EAAA,sEACkBC,IAAMC,IAAN,UAClBC,uCADkB,qBADlB,cACCC,EADD,yBAIEA,EAASC,MAJX,4C,sBAOA,SAAeE,IAAtB,+B,4CAAO,4BAAAP,EAAA,sEACeM,IADf,cACCE,EADD,yBAEEA,EAAMC,OAAOD,EAAMC,OAAOC,OAAS,GAAGC,SAFxC,4C,sBAKA,SAASC,EACdC,GAkBA,MAhB+B,CAC7BC,KAAM,CACJH,QAASE,EAAWE,QACpBC,YAAa,GACbC,QAASC,IAAEC,QAAQN,EAAWE,QAAQK,MAAM,KAAKC,KAAI,SAACC,EAAQC,GAAT,MAAoB,CACvED,OAAQA,EACRE,MAAM,EACND,aAGJE,UAAWZ,EAAWa,SAASL,KAAI,SAACN,EAASQ,GAAV,MAAqB,CACtDI,SAAUZ,EACVa,mBAAoBf,EAAWgB,oBAAoBN,GACnDO,QAAQ,O,oBCzCP,SAASC,EAAaC,GAC3B,IAAMC,EAAQC,aAAaC,QAAQ,SAAWH,GAC9C,OAAIC,EACKG,KAAKC,MAAMJ,GAEb,KAGF,SAASK,IACd,IAAMC,EAUCC,OAAOC,KAAKP,cAChBQ,QAAO,SAACC,GAAD,OAAWA,EAAMC,WAAW,YACnCvB,KACC,SAACsB,GAAD,OAAWP,KAAKC,MAAMH,aAAaC,QAAQQ,OAKrBE,MAAK,SAAC7C,EAAG8C,GAAJ,OAAU9C,EAAE+C,QAAQC,cAAcF,EAAEC,YAjBnE,OAAoB,IAAhBR,EAAK7B,OAAqB,KACvB6B,EAAKA,EAAK7B,OAAS,GAAGC,QAmBxB,SAASsC,EAASC,GACvB,IAAMjB,EAAQF,EAAamB,EAAapC,KAAKH,SACzCsB,GACFA,EAAMkB,KAAOD,EACbjB,EAAMc,SAAU,IAAIK,MAAOC,SAC3BnB,aAAaoB,QACX,SAAWJ,EAAapC,KAAKH,QAC7ByB,KAAKmB,UAAUtB,KAGjBC,aAAaoB,QACX,SAAWJ,EAAapC,KAAKH,QAC7ByB,KAAKmB,UAAU,CACb5C,QAASuC,EAAapC,KAAKH,QAC3B6C,SAAS,IAAIJ,MAAOC,SACpBN,SAAS,IAAIK,MAAOC,SACpBF,KAAMD,EACNpB,OACkE,OAAhEoB,EAAazB,UAAUgC,MAAK,SAAC9B,GAAD,OAAeA,EAASG,a,WCxCvD,SAAS4B,IACd,MAAkCC,mBAChC,MADF,mBAAOC,EAAP,KAAkBC,EAAlB,KAGA,EAA0BF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAUA,OATAC,qBAAU,WACP,sBAAC,sBAAAhE,EAAA,2EAEE6D,EAFF,SAEqBvD,IAFrB,kFAIEyD,EAAS,qDAJX,wDAAD,KAOA,IACCD,EACK,8BAAMA,IAEXF,EAEA,8BACGA,EAAUnD,OACRwD,QACAC,UACA7C,KAAI,SAACsB,GAAD,OACH,cAACwB,EAAA,EAAD,CACEC,UAAWC,IAAW,CACpB,+BACA,CACE,iBDtBM1D,ECsBoBgC,EAAMhC,UDrBI,OAA7CuB,aAAaC,QAAb,gBAA8BxB,SCwBzB2D,GAAIC,IACJC,GAAE,gBAAW7B,EAAMhC,SARrB,SAWGgC,EAAMhC,QAAQ8D,eAFV9B,EAAMhC,QAAUgC,EAAM+B,MD3BlC,IAAiB/D,OCmCf,gD,4BC7CIgE,EAAgB,yDAAgB,WAAOC,EAAUC,GAAjB,SAAA7E,EAAA,sDAC3CiD,EAAS4B,IAAW3B,cADuB,2CAAhB,yDAIhB4B,EAAiBC,YAO5B,2BAP4C,uCAOhB,WAAOC,EAAMC,GAAb,eAAAjF,EAAA,6DACtBiB,EAAUgE,EAASJ,WAAW3B,aAAapC,KAAKG,QAD1B,kBAErBC,IAAEC,QAAQF,GAASI,KAAI,SAAC6D,EAAG3D,GAAJ,mBAAC,eAAmB2D,GAApB,IAAuB3D,cAFzB,2CAPgB,yDAuBjC4D,EAAoBC,YAAY,CAC3CC,KAAM,eACNC,aAXsC,CACtC7D,UAAW,GACXX,KAAM,CACJH,QAAS,GACTK,YAAa,GACbC,QAAS,KAQXsE,SAAU,CACRC,gBAAiB,SAACC,EAAOC,GACvB,OAAOA,EAAOC,SAEhBC,aAAc,SAACH,GACbA,EAAM3E,KAAKE,YAAc,GACzByE,EAAM3E,KAAKG,QAAUwE,EAAM3E,KAAKG,QAAQI,KAAI,SAAC6D,GAAD,mBAAC,eACxCA,GADuC,IAE1C1D,MAAM,QAGVqE,aAAc,SACZJ,EACAC,GAEA,MAAwBA,EAAOC,QAAzBrE,EAAN,EAAMA,OAAQC,EAAd,EAAcA,MAMd,QALcuE,IAAVvE,IACFA,EAAQkE,EAAM3E,KAAKG,QAAQ8E,WACzB,SAACb,GAAD,OAAQA,EAAE1D,MAAQ0D,EAAE5D,OAAOmD,gBAAkBnD,EAAOmD,kBAGpDlD,GAAS,EAAG,CACdkE,EAAM3E,KAAKG,QAAQM,GAAOC,MAAO,EACjCiE,EAAM3E,KAAKE,aAAeM,EAAOmD,cAGjC,IAAMuB,EAASP,EAAMhE,UAAUsE,WAC7B,SAACE,GAAD,OACGA,EAAEnE,QACHmE,EAAErE,mBAAmB6C,gBACnBgB,EAAM3E,KAAKE,YAAYyD,iBAEzBuB,GAAU,IACZP,EAAMhE,UAAUuE,GAAQlE,QAAS,EACjC2D,EAAM3E,KAAKE,YAAc,GACzByE,EAAM3E,KAAKG,QAAUwE,EAAM3E,KAAKG,QAAQI,KAAI,SAAC6D,GAAD,mBAAC,eACxCA,GADuC,IAE1C1D,MAAM,WAMhB0E,cAAe,SAACC,GACdA,EAAQC,QAAQtB,EAAeuB,WAAW,SAACZ,EAAD,GAAyB,IAAfE,EAAc,EAAdA,QAClDF,EAAM3E,KAAKG,QAAU0E,QAKpB,EAIHR,EAAkBmB,QAHpBd,EADK,EACLA,gBACAI,EAFK,EAELA,aACAC,EAHK,EAGLA,aAIWU,EAAqB,SAACd,GAAD,OAAsBA,EAAMvC,aAAapC,MAC9D0F,EAA0B,SAACf,GAAD,OACrCA,EAAMvC,aAAazB,WAEN0D,IAAf,QC9FO,SAASsB,EAA0BC,GACxC,IAAQ/E,EAAqB+E,EAArB/E,SAAUG,EAAW4E,EAAX5E,OAElB,OACE,qBACEsC,UAAWC,IAAW,CACpB,WACA,QACA,CAAE,mBAAoBvC,KAJ1B,SAOGA,EAASH,EAAS8C,cAAgB,IAAIkC,OAAOhF,EAASjB,UCXtD,SAASkG,IACd,IAAMnF,EAAYoF,YAAYL,GAC9B,OACE,qBAAKpC,UAAU,OAAf,SACE,qBACEA,UAAU,kEACV0C,MAAO,CAAEC,UAAW,OAAQC,UAAW,QAFzC,SAIGvF,EAAUJ,KAAI,SAACM,GACd,OACE,cAAC8E,EAAD,eAAuD9E,GAAvBA,EAASA,iBCL9C,SAASsF,EAAwBP,GACtC,IAAM9B,EAAWsC,cAET5F,EAAwBoF,EAAxBpF,OAAQC,EAAgBmF,EAAhBnF,MAAOC,EAASkF,EAATlF,KAMvB,OACE,cAAC2C,EAAA,EAAD,CACEC,UAAU,+BACV0C,MAAO,CACLK,MAAO,MACPC,OAAQ,MACRC,WAAY,MACZC,UAAW,SACXC,cAAe,SACfC,QAAS,IACTC,SAAU,OAEZC,SAAUlG,EACVmG,QAlBgB,WAClB/C,EAASiB,EAAa,CAAEvE,SAAQC,WAChCqD,EAASD,MAIT,SAcGrD,EAAOmD,gBCrBP,SAASmD,IACd,IAAMhD,EAAWsC,cACXpG,EAAO+F,YAAYN,GACjBvF,EAAyBF,EAAzBE,YAAaC,EAAYH,EAAZG,QASrB,OACE,gCACE,qBAAKmD,UAAU,MAAf,SACE,sBAAKA,UAAU,qBAAf,UACGnD,EAAQI,KAAI,SAACC,GACZ,OACE,cAAC2F,EAAD,eAEM3F,GADCA,EAAOA,OAASA,EAAOC,UAKlC,cAAC4C,EAAA,EAAD,CAAQC,UAAU,mBAAmBuD,QApBvB,WACpB/C,EAASE,KACTF,EAASD,MAkBH,2BAKJ,qBAAKP,UAAU,qCAAf,SACE,sBAAKA,UAAU,kDAAf,UACGpD,EAAa,IACd,cAACmD,EAAA,EAAD,CACEC,UAAU,yBACVuD,QA1BU,WAClB/C,EAASgB,KACThB,EAASD,MAyBD+C,SAA+B,KAArB5G,EAAKE,YAHjB,4BClCH,SAAS6G,IACd,IAAMjD,EAAWsC,cACXY,EAAgBC,uBACpB,SAACC,GACC,GAAuB,IAAnBA,EAAIC,IAAIvH,OAAc,CACxB,IAAMY,EAAS0G,EAAIC,IAChBC,UAAU,OACVC,QAAQ,mBAAoB,IAC5B1D,cACHG,EAASiB,EAAa,CAAEvE,YACxBsD,EAASD,SACY,cAAZqD,EAAIC,MACbrD,EAASgB,KACThB,EAASD,QAGb,CAACC,IAQH,OANAZ,qBAAU,WAER,OADAoE,OAAOC,iBAAiB,UAAWP,GAC5B,WACLM,OAAOE,oBAAoB,UAAWR,MAEvC,CAACA,IAEF,sBAAK1D,UAAU,OAAf,UACE,cAACwD,EAAD,IACA,cAAChB,EAAD,OCtBC,SAAS2B,IACd,IAAM3D,EAAWsC,cACTsB,EAAaC,cAAbD,SACR,EAA4B7E,oBAAkB,GAA9C,mBAAO+E,EAAP,KAAeC,EAAf,KACA,EAA0BhF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAsBA,OArBAC,qBAAU,WACP,sBAAC,gCAAAhE,EAAA,yDACMD,EAAqByI,EAASpH,MAAM,IAAIyB,OAAO+F,KAAK,MACpD3G,EAAQF,EAAahC,IAF3B,gBAIE6E,EAASY,EAAgBvD,EAAMkB,OAC/BwF,GAAU,GALZ,4CAQqB/H,EARrB,UASYd,EAAqBC,GATjC,oBAQU8I,GARV,cAWIjE,EAASY,EAAgBqD,IACzBF,GAAU,GAZd,kDAcI5E,EAAS,sDAdb,yDAAD,KAkBA,CAACyE,EAAU5D,IAEA,OAAVd,EACK,8BAAMA,IAEX4E,EAEA,8BACE,cAACb,EAAD,MAIC,+CAAkBW,KC9CpB,SAASM,IACd,MAAgCnF,mBAAwB,MAAxD,mBAAO6E,EAAP,KAAiBO,EAAjB,KACA,EAA0BpF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAWA,OAVAC,qBAAU,WACP,sBAAC,sBAAAhE,EAAA,2EAEE+I,EAFF,SAEoBxI,IAFpB,kFAIEwD,EAAS,oBAJX,wDAAD,KAOA,IAEU,MAATD,EACK,cAAC,IAAD,CAAUU,GAAE,MAGL,MAAZgE,EACK,cAAC,IAAD,CAAUhE,GAAE,gBAAWgE,KAGzB,gDCrBF,SAASQ,IACd,MAAgCrF,mBAAwB,MAAxD,mBAAO6E,EAAP,KAAiBO,EAAjB,KACA,EAA0BpF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAUA,OATAC,qBAAU,WAEkB,OADA1B,IAExByB,EAAS,8BAETgF,EAAYzG,OAEb,IAEU,MAATwB,EACK,cAAC,IAAD,CAAUU,GAAE,MAGL,MAAZgE,EACK,cAAC,IAAD,CAAUhE,GAAE,gBAAWgE,KAGzB,gDCrBF,SAASS,KACd,OACE,sBAAK7E,UAAU,OAAf,UACE,cAACD,EAAA,EAAD,CAAQC,UAAU,mBAAmBE,GAAIC,IAASC,GAAG,eAArD,4CAGA,cAACL,EAAA,EAAD,CAAQC,UAAU,mBAAmBE,GAAIC,IAASC,GAAG,iBAArD,8CAGA,cAACL,EAAA,EAAD,CAAQC,UAAU,mBAAmBE,GAAIC,IAASC,GAAG,aAArD,sC,sBCVC,SAAS0E,KACd,OACE,eAACC,GAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAAQC,OAAO,KAA1C,UACE,cAACH,GAAA,EAAOI,MAAR,CAAcjF,GAAIC,IAASC,GAAG,IAA9B,uBAGA,cAAC2E,GAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,cAACN,GAAA,EAAOO,SAAR,CAAiBC,GAAG,mBAApB,SACE,eAACC,GAAA,EAAD,CAAKxF,UAAU,UAAf,UACE,cAACwF,GAAA,EAAIC,KAAL,CAAUvF,GAAIC,IAASC,GAAG,eAA1B,+BAGA,cAACoF,GAAA,EAAIC,KAAL,CAAUvF,GAAIC,IAASC,GAAG,iBAA1B,kCAGA,cAACoF,GAAA,EAAIC,KAAL,CAAUvF,GAAIC,IAASC,GAAG,aAA1B,oCCoBKsF,OA3Bf,WACE,OACE,eAAC,IAAD,WACE,cAACZ,GAAD,IACA,cAACa,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACE,cAACjB,GAAD,MAEF,cAAC,IAAD,CAAOgB,KAAK,iBAAiBC,OAAK,EAAlC,SACE,cAAClB,EAAD,MAEF,cAAC,IAAD,CAAOiB,KAAK,aAAaC,OAAK,EAA9B,SACE,cAACxG,EAAD,MAEF,cAAC,IAAD,CAAOuG,KAAK,eAAeC,OAAK,EAAhC,SACE,cAACpB,EAAD,MAEF,cAAC,IAAD,CAAOmB,KAAK,kBAAZ,SACE,cAAC1B,EAAD,eC3BC4B,GAAQC,YAAe,CAClCC,QAAS,CACPnH,aAAcoH,KCOEC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACxH,GACNyH,QAAQzH,MAAMA,EAAM0H,c","file":"static/js/main.f681aad6.chunk.js","sourcesContent":["import axios from 'axios'\nimport _ from 'lodash'\nimport {\n  AnagramaGame,\n  RachaCucaAnagramas,\n  RachaCucaAnagramasIndex,\n} from '../../interfaces'\n\nexport async function getRachacucaAnagrama(normalizedAnagrama: string) {\n  const response = await axios.get<RachaCucaAnagramas>(\n    `${process.env.PUBLIC_URL}/dump/${normalizedAnagrama}.json`\n  )\n  return response.data\n}\n\nexport async function getRachacucaAnagramaIndex() {\n  const response = await axios.get<RachaCucaAnagramasIndex>(\n    `${process.env.PUBLIC_URL}/dump/index.json`\n  )\n  return response.data\n}\n\nexport async function getLastRachacucaGame() {\n  const games = await getRachacucaAnagramaIndex()\n  return games.byDate[games.byDate.length - 1].anagram\n}\n\nexport function convertRachacucaToAnagramaGame(\n  rcAnagrama: RachaCucaAnagramas\n): AnagramaGame {\n  const gameData: AnagramaGame = {\n    word: {\n      anagram: rcAnagrama.palavra,\n      currentWord: '',\n      letters: _.shuffle(rcAnagrama.palavra.split('')).map((letter, index) => ({\n        letter: letter,\n        used: false,\n        index,\n      })),\n    },\n    solutions: rcAnagrama.palavras.map((palavra, index) => ({\n      solution: palavra,\n      normalizedSolution: rcAnagrama.palavras_normalized[index],\n      solved: false,\n    })),\n  }\n  return gameData\n}\n","import { AnagramaGame, SavedGame } from '../../interfaces'\n\nexport function GetSavedGame(anagramaNormalizado: string): SavedGame | null {\n  const saved = localStorage.getItem('saved:' + anagramaNormalizado)\n  if (saved) {\n    return JSON.parse(saved) as SavedGame\n  }\n  return null\n}\n\nexport function GetLatestSavedGameAnagram(): string | null {\n  const list = GetOrderedSave()\n  if (list.length === 0) return null\n  return list[list.length - 1].anagram\n}\n\nexport function IsSaved(anagram: string) {\n  return localStorage.getItem(`saved:${anagram}`) !== null\n}\n\nexport function GetAllSavedGames(): SavedGame[] {\n  return Object.keys(localStorage)\n    .filter((value) => value.startsWith('saved'))\n    .map(\n      (value) => JSON.parse(localStorage.getItem(value) as string) as SavedGame\n    )\n}\n\nexport function GetOrderedSave(): SavedGame[] {\n  return GetAllSavedGames().sort((a, b) => a.updated.localeCompare(b.updated))\n}\n\nexport function SaveGame(anagramaGame: AnagramaGame): void {\n  const saved = GetSavedGame(anagramaGame.word.anagram)\n  if (saved) {\n    saved.game = anagramaGame\n    saved.updated = new Date().toJSON()\n    localStorage.setItem(\n      'saved:' + anagramaGame.word.anagram,\n      JSON.stringify(saved)\n    )\n  } else {\n    localStorage.setItem(\n      'saved:' + anagramaGame.word.anagram,\n      JSON.stringify({\n        anagram: anagramaGame.word.anagram,\n        created: new Date().toJSON(),\n        updated: new Date().toJSON(),\n        game: anagramaGame,\n        solved:\n          anagramaGame.solutions.find((solution) => !solution.solved) === null,\n      } as SavedGame)\n    )\n  }\n}\n","import React from 'react'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport { Button } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\nimport { getRachacucaAnagramaIndex } from '../features/anagramaGame/AnagramAPI'\nimport { RachaCucaAnagramasIndex } from '../interfaces'\nimport ClassNames from 'classnames'\nimport { IsSaved } from '../features/anagramaGame/SavedGame'\n\nexport function GameListComponent() {\n  const [anagramas, setAnagramas] = useState<RachaCucaAnagramasIndex | null>(\n    null\n  )\n  const [error, setError] = useState<string | null>(null)\n  useEffect(() => {\n    ;(async () => {\n      try {\n        setAnagramas(await getRachacucaAnagramaIndex())\n      } catch (e) {\n        setError('Não foi possível carregar a lista de jogos.')\n      }\n    })()\n  }, [])\n  if (error) {\n    return <div>{error}</div>\n  }\n  if (anagramas) {\n    return (\n      <div>\n        {anagramas.byDate\n          .slice()\n          .reverse()\n          .map((value) => (\n            <Button\n              className={ClassNames([\n                'btn-lg btn-block btn-primary',\n                {\n                  'btn-secondary': !IsSaved(value.anagram),\n                },\n              ])}\n              as={NavLink}\n              to={`/game/${value.anagram}`}\n              key={value.anagram + value.date}\n            >\n              {value.anagram.toUpperCase()}\n            </Button>\n          ))}\n      </div>\n    )\n  }\n  return <div>Carregando...</div>\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState, AppThunk } from '../../app/store'\nimport { AnagramaGame, AnagramaLetter } from '../../interfaces'\nimport _ from 'lodash'\nimport { SaveGame } from './SavedGame'\n\nexport const SaveGameThunk = (): AppThunk => async (dispatch, getState) => {\n  SaveGame(getState().anagramaGame)\n}\n\nexport const shuffleLetters = createAsyncThunk<\n  AnagramaLetter[],\n  void,\n  {\n    // Optional fields for defining thunkApi field types\n    state: RootState\n  }\n>('anagramas/shuffleLetters', async (_arg, thunkAPI) => {\n  const letters = thunkAPI.getState().anagramaGame.word.letters\n  return _.shuffle(letters).map((l, index) => ({ ...l, index }))\n})\n\nexport interface AnagramaGameState extends AnagramaGame {}\n\nconst initialState: AnagramaGameState = {\n  solutions: [],\n  word: {\n    anagram: '',\n    currentWord: '',\n    letters: [],\n  },\n}\n\nexport const anagramaGameSlice = createSlice({\n  name: 'anagramaGame',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    setAnagramaData: (state, action: PayloadAction<AnagramaGame>) => {\n      return action.payload\n    },\n    clearLetters: (state) => {\n      state.word.currentWord = ''\n      state.word.letters = state.word.letters.map((l) => ({\n        ...l,\n        used: false,\n      }))\n    },\n    selectLetter: (\n      state,\n      action: PayloadAction<{ letter: string; index?: number }>\n    ) => {\n      let { letter, index } = action.payload\n      if (index === undefined) {\n        index = state.word.letters.findIndex(\n          (l) => !l.used && l.letter.toUpperCase() === letter.toUpperCase()\n        )\n      }\n      if (index >= 0) {\n        state.word.letters[index].used = true\n        state.word.currentWord += letter.toUpperCase()\n\n        //Checa se há soluções\n        const sIndex = state.solutions.findIndex(\n          (s) =>\n            !s.solved &&\n            s.normalizedSolution.toUpperCase() ===\n              state.word.currentWord.toUpperCase()\n        )\n        if (sIndex >= 0) {\n          state.solutions[sIndex].solved = true\n          state.word.currentWord = ''\n          state.word.letters = state.word.letters.map((l) => ({\n            ...l,\n            used: false,\n          }))\n        }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(shuffleLetters.fulfilled, (state, { payload }) => {\n      state.word.letters = payload\n    })\n  },\n})\n\nexport const {\n  setAnagramaData,\n  clearLetters,\n  selectLetter,\n} = anagramaGameSlice.actions\n\nexport const selectAnagramaGame = (state: RootState) => state.anagramaGame\nexport const selectAnagramaWord = (state: RootState) => state.anagramaGame.word\nexport const selectAnagramaSolutions = (state: RootState) =>\n  state.anagramaGame.solutions\n\nexport default anagramaGameSlice.reducer\n","import React from 'react'\nimport ClassNames from 'classnames'\nimport { AnagramaSolution } from '../interfaces'\n\nexport function AnagramaSolutionComponent(props: AnagramaSolution) {\n  const { solution, solved } = props\n\n  return (\n    <div\n      className={ClassNames([\n        'col-md-3',\n        'col-4',\n        { 'font-weight-bold': solved },\n      ])}\n    >\n      {solved ? solution.toUpperCase() : '?'.repeat(solution.length)}\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectAnagramaSolutions } from '../features/anagramaGame/anagramaGameSlice'\nimport { AnagramaSolutionComponent } from './solution'\nexport function AnagramaSolutionsComponent() {\n  const solutions = useSelector(selectAnagramaSolutions)\n  return (\n    <div className=\"card\">\n      <div\n        className=\" card-body row d-flex align-items-start text-center flex-column\"\n        style={{ minHeight: '50vh', maxHeight: '70vh' }}\n      >\n        {solutions.map((solution) => {\n          return (\n            <AnagramaSolutionComponent key={solution.solution} {...solution} />\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useDispatch } from 'react-redux'\nimport {\n  SaveGameThunk,\n  selectLetter,\n} from '../features/anagramaGame/anagramaGameSlice'\nimport { AnagramaLetter } from '../interfaces'\n\nexport function AnagramaLetterComponent(props: AnagramaLetter) {\n  const dispatch = useDispatch()\n\n  const { letter, index, used } = props\n  const handleClick = () => {\n    dispatch(selectLetter({ letter, index }))\n    dispatch(SaveGameThunk())\n  }\n\n  return (\n    <Button\n      className=\"mr-2 mt-2 pd-0 btn-lg shadow\"\n      style={{\n        width: '2em',\n        height: '2em',\n        lineHeight: '2em',\n        textAlign: 'center',\n        verticalAlign: 'middle',\n        padding: '0',\n        fontSize: '2em',\n      }}\n      disabled={used}\n      onClick={handleClick}\n    >\n      {letter.toUpperCase()}\n    </Button>\n  )\n}\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  clearLetters,\n  SaveGameThunk,\n  selectAnagramaWord,\n  shuffleLetters,\n} from '../features/anagramaGame/anagramaGameSlice'\n\nimport { AnagramaLetterComponent } from './letter'\n\nexport function AnagramaWordComponent() {\n  const dispatch = useDispatch()\n  const word = useSelector(selectAnagramaWord)\n  const { currentWord, letters } = word\n  const handleShuffle = () => {\n    dispatch(shuffleLetters())\n    dispatch(SaveGameThunk())\n  }\n  const handleClear = () => {\n    dispatch(clearLetters())\n    dispatch(SaveGameThunk())\n  }\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-12 text-center\">\n          {letters.map((letter) => {\n            return (\n              <AnagramaLetterComponent\n                key={letter.letter + letter.index}\n                {...letter}\n              />\n            )\n          })}\n          <Button className=\"btn-warning mt-2\" onClick={handleShuffle}>\n            Misturar\n          </Button>\n        </div>\n      </div>\n      <div className=\"row justify-content-md-center mt-2\">\n        <div className=\"col-12 col-md-6 text-center h2 alert alert-info\">\n          {currentWord}{' '}\n          <Button\n            className=\"btn-danger float-right\"\n            onClick={handleClear}\n            disabled={word.currentWord === ''}\n          >\n            Limpar\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport {\n  clearLetters,\n  SaveGameThunk,\n  selectLetter,\n} from '../features/anagramaGame/anagramaGameSlice'\nimport { AnagramaSolutionsComponent } from './solutions'\nimport { AnagramaWordComponent } from './word'\n\nexport function AnagramaGameComponent() {\n  const dispatch = useDispatch()\n  const handleKeyDown = useCallback(\n    (evt: KeyboardEvent) => {\n      if (evt.key.length === 1) {\n        const letter = evt.key\n          .normalize('NFD')\n          .replace(/[\\u0300-\\u036f]/g, '')\n          .toUpperCase()\n        dispatch(selectLetter({ letter }))\n        dispatch(SaveGameThunk())\n      } else if (evt.key === 'Backspace') {\n        dispatch(clearLetters())\n        dispatch(SaveGameThunk())\n      }\n    },\n    [dispatch]\n  )\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown])\n  return (\n    <div className=\"mt-5\">\n      <AnagramaWordComponent />\n      <AnagramaSolutionsComponent />\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport { setAnagramaData } from '../features/anagramaGame/anagramaGameSlice'\nimport {\n  convertRachacucaToAnagramaGame,\n  getRachacucaAnagrama,\n} from '../features/anagramaGame/AnagramAPI'\nimport { GetSavedGame } from '../features/anagramaGame/SavedGame'\nimport { AnagramaGameComponent } from './game'\n\ninterface GameLoaderParams {\n  anagrama: string\n}\n\nexport function GameLoaderComponent() {\n  const dispatch = useDispatch()\n  const { anagrama } = useParams() as GameLoaderParams\n  const [loaded, setLoaded] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  useEffect(() => {\n    ;(async () => {\n      const normalizedAnagrama = anagrama.split('').sort().join('')\n      const saved = GetSavedGame(normalizedAnagrama)\n      if (saved) {\n        dispatch(setAnagramaData(saved.game))\n        setLoaded(true)\n      } else {\n        try {\n          const gameData = convertRachacucaToAnagramaGame(\n            await getRachacucaAnagrama(normalizedAnagrama)\n          )\n          dispatch(setAnagramaData(gameData))\n          setLoaded(true)\n        } catch (e) {\n          setError('Os dados deste jogo não puderam ser carregados.')\n        }\n      }\n    })()\n  }, [anagrama, dispatch])\n\n  if (error !== null) {\n    return <div>{error}</div>\n  }\n  if (loaded) {\n    return (\n      <div>\n        <AnagramaGameComponent />\n      </div>\n    )\n  }\n  return <div>Carregando: {anagrama}</div>\n}\n","import React, { useState } from 'react'\nimport { useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { getLastRachacucaGame } from '../features/anagramaGame/AnagramAPI'\n\nexport function LatestGameComponent() {\n  const [anagrama, setAnagrama] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  useEffect(() => {\n    ;(async () => {\n      try {\n        setAnagrama(await getLastRachacucaGame())\n      } catch (e) {\n        setError('Ocorreu um erro!')\n      }\n    })()\n  }, [])\n\n  if (error != null) {\n    return <Redirect to={`/`} />\n  }\n\n  if (anagrama != null) {\n    return <Redirect to={`/game/${anagrama}`} />\n  }\n\n  return <div>carregando...</div>\n}\n","import React, { useState } from 'react'\nimport { useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { GetLatestSavedGameAnagram } from '../features/anagramaGame/SavedGame'\n\nexport function LatestSaveComponent() {\n  const [anagrama, setAnagrama] = useState<string | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  useEffect(() => {\n    const latestSaveAnagram = GetLatestSavedGameAnagram()\n    if (latestSaveAnagram === null) {\n      setError('Não há jogos salvos!')\n    } else {\n      setAnagrama(GetLatestSavedGameAnagram())\n    }\n  }, [])\n\n  if (error != null) {\n    return <Redirect to={`/`} />\n  }\n\n  if (anagrama != null) {\n    return <Redirect to={`/game/${anagrama}`} />\n  }\n\n  return <div>carregando...</div>\n}\n","import { Button } from 'react-bootstrap'\nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nexport function MainComponent() {\n  return (\n    <div className=\"mt-5\">\n      <Button className=\"btn-lg btn-block\" as={NavLink} to=\"/game/latest\">\n        Ir para a palavra mais recente\n      </Button>\n      <Button className=\"btn-lg btn-block\" as={NavLink} to=\"/game/continue\">\n        Continuar o último jogo salvo\n      </Button>\n      <Button className=\"btn-lg btn-block\" as={NavLink} to=\"/game/list\">\n        Listar todos os jogos\n      </Button>\n    </div>\n  )\n}\n","import { Navbar, Nav } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\n\nexport function TopMenuComponent() {\n  return (\n    <Navbar bg=\"light\" variant=\"light\" expand=\"md\">\n      <Navbar.Brand as={NavLink} to=\"/\">\n        Anagramas\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link as={NavLink} to=\"/game/latest\">\n            Última Palavra\n          </Nav.Link>\n          <Nav.Link as={NavLink} to=\"/game/continue\">\n            Continuar Jogo Salvo\n          </Nav.Link>\n          <Nav.Link as={NavLink} to=\"/game/list\">\n            Lista de Jogos\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css'\nimport { GameListComponent } from './components/game-list'\nimport { GameLoaderComponent } from './components/game-loader'\nimport { LatestGameComponent } from './components/latest-game'\nimport { LatestSaveComponent } from './components/latest-save'\nimport { MainComponent } from './components/main'\nimport { TopMenuComponent } from './components/top-menu'\n\nfunction App() {\n  return (\n    <Router>\n      <TopMenuComponent />\n      <Container fluid>\n        <Switch>\n          <Route path=\"/\" exact>\n            <MainComponent />\n          </Route>\n          <Route path=\"/game/continue\" exact>\n            <LatestSaveComponent />\n          </Route>\n          <Route path=\"/game/list\" exact>\n            <GameListComponent />\n          </Route>\n          <Route path=\"/game/latest\" exact>\n            <LatestGameComponent />\n          </Route>\n          <Route path=\"/game/:anagrama\">\n            <GameLoaderComponent />\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  )\n}\n\nexport default App\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit'\nimport anagramaGameReducer from '../features/anagramaGame/anagramaGameSlice'\n\nexport const store = configureStore({\n  reducer: {\n    anagramaGame: anagramaGameReducer,\n  },\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport { store } from './app/store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}